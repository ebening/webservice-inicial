package com.uadec.ws.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.uadec.core.base.BaseController;
import com.uadec.core.util.Constantes;
import com.uadec.entity.model.CatDocumentos;
import com.uadec.entity.model.CatTipoTramite;
import com.uadec.entity.model.DocumentoImportado;
import com.uadec.entity.model.Solicitud;
import com.uadec.entity.model.Usuario;
import com.uadec.ws.model.DataContent;
import com.uadec.ws.service.DataContentService;
import com.uadec.ws.util.ConstantesWs;
import com.uadec.ws.util.Utilerias;
import com.uadec.ws.validator.DataContentValidator;

@RestController
@RequestMapping(value=ConstantesWs.CONTEXTO + Constantes.CONTEXTO_ROOT + "data")
public class DataContentController extends BaseController<DataContentService,DataContent> {
	
	private static final Logger logger = Logger.getLogger(DataContentController.class);
	
	@Autowired 
	DataContentValidator dataContentValidator;
	
	@RequestMapping(value = "/uploadFile", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public String upladFile(HttpSession session, HttpServletRequest request, HttpServletResponse response, @ModelAttribute DataContent dataContent, BindingResult result) {
		
		Solicitud solicitud = new Solicitud();
		solicitud.setAutorizador("autorizador");
		CatTipoTramite catTipoTramite1 = new CatTipoTramite();
		catTipoTramite1.setIdTipoTramite(1);
		solicitud.setCatTipoTramite(catTipoTramite1);
		solicitud.setCheque("cheque");
		solicitud.setCiclo("0003");
		solicitud.setClaveBeneficiario("clabe");
		solicitud.setContrato("contrato");
		solicitud.setCuentaPagar("cuenta");
		solicitud.setElaborador("elaborador");
		solicitud.setFechaSolicitud(new Date());
		solicitud.setFolioSdr("folio");
		solicitud.setFolioVentanilla("folio");
		solicitud.setFondo("fondo");
		solicitud.setImporte(BigDecimal.ZERO);
		solicitud.setNCbancaria("nbancaria");
		solicitud.setNCompromiso("conpromiso");
		solicitud.setRfcProveedor("rfc");
		solicitud.setUnidadOrg("unidad");
		
		DocumentoImportado documentoImportado = new DocumentoImportado();
		CatDocumentos catDocumentos1 = new CatDocumentos();
		catDocumentos1.setIdDocumento(1);
		documentoImportado.setCatDocumentos(catDocumentos1);
		documentoImportado.setNombredoc("nombre");
		documentoImportado.setPid("");
		Solicitud solicitud2 = new Solicitud();
		solicitud2.setIdSolicitud(1L);
		documentoImportado.setSolicitud(solicitud2);
		Usuario usuario = new Usuario();
		usuario.setIdUsuario(1L);
		documentoImportado.setUsuario(usuario);
		
//		if(dataContent.getSolicitud() == null 
//				|| dataContent.getSolicitud().getCiclo() == null 
//				|| dataContent.getSolicitud().getCuentaPagar() == null 
//				|| dataContent.getSolicitud().getCatTipoTramite() == null 
//				|| dataContent.getSolicitud().getCatTipoTramite().getIdTipoTramite() == null 
//				|| dataContent.getDocumentoImportado().getCatDocumentos() == null 
//				|| dataContent.getDocumentoImportado().getCatDocumentos().getIdDocumento() == null) {
//			return Constantes.PARAMETROS_INCOMPLETOS;
//		}
		
		dataContentValidator.validate(dataContent, result);
		if (result.hasErrors()) {
			request.setAttribute("dataContent", dataContent);
			List<ObjectError> errors = result.getAllErrors();
			System.out.print(errors.toString());
			logger.debug(errors.toString());
			return errors.toString();
		} else {
			try {
				CatTipoTramite catTipoTramite = new CatTipoTramite();
				catTipoTramite.setIdTipoTramite(dataContent.getSolicitud().getCatTipoTramite().getIdTipoTramite());
				dataContent.getSolicitud().setCatTipoTramite(catTipoTramite);
				if (StringUtils.isEmpty(dataContent.getSolicitud().getFechaSolicitudStr())) {
					String today = Utilerias.convertDateFormat(new Date());
					dataContent.getSolicitud().setFechaSolicitud(Utilerias.parseDate(today, "dd/MM/yyyy"));
				} else {
					dataContent.getSolicitud().setFechaSolicitud(Utilerias.parseDate(dataContent.getSolicitud().getFechaSolicitudStr(), "dd/MM/yyyy"));
				}
				
				dataContent.getSolicitud().setCatTipoTramite(catTipoTramite);
				
				if (StringUtils.isEmpty(dataContent.getSolicitud().getImporteStr())) {
					dataContent.getSolicitud().setImporte(BigDecimal.ZERO);
				} else {
					dataContent.getSolicitud().setImporte(Utilerias.convertStringToBigDecimal(dataContent.getSolicitud().getImporteStr()));
				}
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			CatDocumentos catDocumentos = new CatDocumentos();
			catDocumentos.setIdDocumento(dataContent.getDocumentoImportado().getCatDocumentos().getIdDocumento());
			dataContent.getDocumentoImportado().setCatDocumentos(catDocumentos);
			
//			CatTipoCuenta catTipoCuenta = new CatTipoCuenta();
//			catTipoCuenta.setIdTipoCuenta(dataContent.getDetalleCuenta().getCatTipoCuenta().getIdTipoCuenta());
//			//dataContent.setCatTipoCuenta(catTipoCuenta);
//			DetalleCuentas detalleCuenta = new DetalleCuentas();
//			detalleCuenta.setCatTipoCuenta(catTipoCuenta);
//			dataContent.setDetalleCuenta(detalleCuenta);
			
			getService().saveDataContent(dataContent);
		}
		
		return "{'success':'SUCCESS!!'}";
	}

}
