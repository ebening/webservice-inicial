package com.uadec.core.cm;
import java.util.Map;
public abstract class BaseModelCm implements Modelable{

	private String pid;
	private Map<String,AtributoCm> atributos;
	/**
	 * @return El pid del documento.
	 */
	public String getPid() {
		return pid;
	}

	/**
	 * @param pid
	 *            - El pid para asignar.
	 */
	public void setPid(String pid) {
		this.pid = pid;
	}
	/**
	 * @return Los atributos del documento.
	 */
	public Map<String,AtributoCm> getAtributos() {
		return atributos;
	}

	/**
	 * @param atributos
	 *            - Atributos pàra asignar.
	 */
	public void setAtributos(Map<String,AtributoCm> atributos) {
		this.atributos = atributos;
	}

	/**
	 * Este metodo busca dentro de su lista de atributos aquel que coinsida con
	 * el nombre ingresado y regresa su valor.
	 * 
	 * @param attrName
	 *            - Nombre del atributo buscado.
	 * @return Valor del atrobuto buscado o null si no existe un atributo con
	 *         ese nombre.
	 */
	public Object getValorAtributo(String attrName) {
		AtributoCm atributo = this.atributos.get(attrName);

		if (atributo != null) {
			return atributo.getValor();
		}

		return null;
	}

	/**
	 * Este metodo busca dentro de su lista de atributos aquei que coinsida con
	 * el nombre ingresado y devuelve el objeto del Atributo.
	 * 
	 * @param attrName
	 *            - Nombre del atributo.
	 * @return Objeto Attr o null si no existe un atributo con ese nombre.
	 */
	public AtributoCm getAtributo(String attrName) {
		return atributos.get(attrName);
	}

	public String toString() {
		StringBuilder docString = new StringBuilder();
		docString.append("\nDocumento").append("\nPid").append(pid);

		if (atributos != null && !atributos.isEmpty()) {
			docString.append("\nAtributos");
			for (AtributoCm atributo : atributos.values()) {
				docString.append("\n").append(atributo.toString());
			}
		}

		return docString.toString();
	}
}